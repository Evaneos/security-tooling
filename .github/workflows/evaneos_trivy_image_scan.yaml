name: 'Evaneos reusable trivy image scan workflow'

on:
  workflow_call:
    inputs:
      image-name:
        description: 'Docker image name to scan (without tag)'
        required: true
        type: string
      image-tag:
        description: 'Docker image tag to scan'
        required: false
        type: string
        default: 'latest'
      scan-mode:
        description: 'Scan mode: "build" to build image, "registry" to pull from registry'
        required: false
        type: string
        default: 'registry'
      push-image:
        description: 'Whether to push the image to registry after scan (only works with scan-mode: build)'
        required: false
        type: boolean
        default: false
      build-target:
        description: 'Docker build target (e.g., prod, dev)'
        required: false
        type: string
        default: 'prod'
      cache-from:
        description: 'Cache source for Docker build'
        required: false
        type: string
      cache-to:
        description: 'Cache destination for Docker build'
        required: false
        type: string
      require-approval-on-vulns:
        description: 'Require manual approval if CRITICAL or HIGH vulnerabilities found before pushing'
        required: false
        type: boolean
        default: false
    secrets:
      composer-github-token:
        description: 'GitHub token for Composer authentication'
        required: false
      docker-registry-username:
        description: 'Docker registry username'
        required: false
      docker-registry-password:
        description: 'Docker registry password'
        required: false
    outputs:
      critical-count:
        description: 'Number of CRITICAL vulnerabilities found'
        value: ${{ jobs.security-scan.outputs.critical }}
      high-count:
        description: 'Number of HIGH vulnerabilities found'
        value: ${{ jobs.security-scan.outputs.high }}
      scan-passed:
        description: 'Whether scan completed without CRITICAL or HIGH vulnerabilities'
        value: ${{ jobs.security-scan.outputs.scan-passed }}


env:
  TRIVY_DISABLE_VEX_NOTICE: true

permissions:
  contents: read

jobs:
  security-scan:
    runs-on: ubuntu-latest
    outputs:
      critical: ${{ steps.count-vulns.outputs.critical }}
      high: ${{ steps.count-vulns.outputs.high }}
      scan-passed: ${{ steps.count-vulns.outputs.scan-passed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Checkout security-tooling repo
        uses: actions/checkout@v4
        with:
          repository: Evaneos/security-tooling
          token: ${{ secrets.GITHUB_TOKEN }}
          path: security-tooling

      - name: Set up Docker Buildx
        if: inputs.scan-mode == 'build'
        uses: docker/setup-buildx-action@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Login to Docker registry for build cache
        if: inputs.scan-mode == 'build' && inputs.cache-from && contains(inputs.cache-from, 'type=registry')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker-registry-username }}
          password: ${{ secrets.docker-registry-password }}

      - name: Build Docker image locally
        if: inputs.scan-mode == 'build'
        uses: docker/build-push-action@v6
        with:
          target: ${{ inputs.build-target }}
          load: true
          tags: '${{ inputs.image-name }}:${{ inputs.image-tag }}'
          cache-from: ${{ inputs.cache-from || 'type=gha' }}
          cache-to: ${{ inputs.cache-to || 'type=gha,mode=max' }}
          secrets: |
            composer_auth={"github-oauth": {"github.com": "${{ secrets.composer-github-token || secrets.GITHUB_TOKEN }}"}}

      - name: Login to Docker registry
        if: inputs.scan-mode == 'registry'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker-registry-username }}
          password: ${{ secrets.docker-registry-password }}

      - name: Pull Docker image from registry
        if: inputs.scan-mode == 'registry'
        run: docker pull ${{ inputs.image-name }}:${{ inputs.image-tag }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          trivy-config: 'security-tooling/.github/workflows/security/trivy-config.yaml'
          image-ref: '${{ inputs.image-name }}:${{ inputs.image-tag }}'
      
      - name: Generate Dockerfile suggestions
        if: always()
        run: |
          if [ -f trivy-findings.json ]; then
            python security-tooling/.github/workflows/security/trivy_suggested_updates.py trivy-findings.json
            if [ -f dockerfile-suggestions.txt ]; then
              echo "## üìù Suggested Dockerfile Updates" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo '```dockerfile' >> $GITHUB_STEP_SUMMARY
              cat dockerfile-suggestions.txt >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Count vulnerabilities
        id: count-vulns
        if: always()
        run: |
          if [ -f trivy-findings.json ]; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-findings.json)
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-findings.json)
            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            if [ "$CRITICAL" -eq 0 ] && [ "$HIGH" -eq 0 ]; then
              echo "scan-passed=true" >> $GITHUB_OUTPUT
            else
              echo "scan-passed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "critical=0" >> $GITHUB_OUTPUT
            echo "high=0" >> $GITHUB_OUTPUT
            echo "scan-passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Add Trivy summary to run
        if: always()
        run: |
          echo "## üîç Trivy Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ inputs.image-name }}:${{ inputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f trivy-findings.json ]; then
            CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-findings.json)
            HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-findings.json)
            MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-findings.json)
            LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' trivy-findings.json)
            TOTAL=$(jq '[.Results[]?.Vulnerabilities[]?] | length' trivy-findings.json)
            
            echo "**Total: $TOTAL** (üî¥ CRITICAL: $CRITICAL, üü† HIGH: $HIGH, üü° MEDIUM: $MEDIUM, üü¢ LOW: $LOW)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ $TOTAL -gt 0 ]; then
              jq -r '
                def severity_order:
                  if . == "CRITICAL" then 0
                  elif . == "HIGH" then 1
                  elif . == "MEDIUM" then 2
                  elif . == "LOW" then 3
                  else 4
                  end;
                
                .Results[]? |
                if .Vulnerabilities and (.Vulnerabilities | length > 0) then
                  .Target as $target |
                  .Type as $type |
                  
                  "\n" + $target + " (" + $type + ")",
                  "=" + ("=" * (($target + " (" + $type + ")") | length)),
                  "",
                  "| Package | Vulnerability | Severity | Installed Version | Fixed Version | Title |",
                  "|---------|---------------|----------|-------------------|---------------|-------|",
                  (
                    .Vulnerabilities |
                    sort_by(.Severity | severity_order) |
                    .[] |
                    "| " + .PkgName + " | " + .VulnerabilityID + " | " + .Severity + " | " + .InstalledVersion + " | " + (.FixedVersion // "") + " | " + ((.Title // .Description // "")[0:80]) + " |"
                  )
                else empty end
              ' trivy-findings.json >> $GITHUB_STEP_SUMMARY
            else
              echo "‚úÖ No vulnerabilities found!" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå No scan results found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Sanitize image name for artifact
        if: always()
        id: sanitize
        run: |
          SANITIZED_NAME=$(echo "${{ inputs.image-name }}" | tr '/' '-')
          echo "artifact-name=trivy-results-${SANITIZED_NAME}-${{ inputs.image-tag }}" >> $GITHUB_OUTPUT

      - name: Upload Trivy results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ steps.sanitize.outputs.artifact-name }}
          path: |
            trivy-findings.json

      - name: Check if push should proceed
        id: push-decision
        if: inputs.scan-mode == 'build' && inputs.push-image
        run: |
          CRITICAL=${{ steps.count-vulns.outputs.critical }}
          HIGH=${{ steps.count-vulns.outputs.high }}

          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            if [ "${{ inputs.require-approval-on-vulns }}" == "true" ]; then
              echo "should-wait=true" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è Found $CRITICAL CRITICAL and $HIGH HIGH vulnerabilities. Manual approval required." >> $GITHUB_STEP_SUMMARY
            else
              echo "should-wait=false" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è Found $CRITICAL CRITICAL and $HIGH HIGH vulnerabilities. Pushing anyway (no approval required)." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "should-wait=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No CRITICAL or HIGH vulnerabilities found. Proceeding with push." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Wait for manual approval
        if: inputs.scan-mode == 'build' && inputs.push-image && steps.push-decision.outputs.should-wait == 'true'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Security vulnerabilities found - Approve to push image"
          issue-body: |
            **Image:** ${{ inputs.image-name }}:${{ inputs.image-tag }}

            **Vulnerabilities found:**
            - üî¥ CRITICAL: ${{ steps.count-vulns.outputs.critical }}
            - üü† HIGH: ${{ steps.count-vulns.outputs.high }}

            Review the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) and approve to push the image to the registry.

      - name: Login to Docker registry for push
        if: inputs.scan-mode == 'build' && inputs.push-image
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker-registry-username }}
          password: ${{ secrets.docker-registry-password }}

      - name: Push Docker image to registry
        if: inputs.scan-mode == 'build' && inputs.push-image
        uses: docker/build-push-action@v6
        with:
          target: ${{ inputs.build-target }}
          tags: '${{ inputs.image-name }}:${{ inputs.image-tag }}'
          push: true
          cache-from: ${{ inputs.cache-from || 'type=gha' }}
          cache-to: ${{ inputs.cache-to || 'type=gha,mode=max' }}
          secrets: |
            composer_auth={"github-oauth": {"github.com": "${{ secrets.composer-github-token || secrets.GITHUB_TOKEN }}"}}